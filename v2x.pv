(* Define channels, ch_1 is a secure channel for communication with TA to provide registration services, ch_2 is for inter-vehicle message exchange, ch_3 has the same functionality as ch_1 *)
free ch_1: channel[private].
free ch_2: channel.
free ch_3: channel[private].

(* Private keys for each component *)
free p_t: bitstring[private].
free p_v: bitstring[private].
free p_u: bitstring[private].

(* Encrypted message transmitted by vehicles, used to check if the protocol is secure *)
free s_msg: bitstring[private].

(* Communication keys between vehicles *)
free Sk_vu: bitstring[private].
free Sk_uv: bitstring[private].

(* Vehicle IDs *)
const ID_v: bitstring.
const ID_u: bitstring.

(* ECC operations *)
const P: bitstring.
fun mult(bitstring, bitstring): bitstring.

(* Arithmetic operations *)
fun mul(bitstring, bitstring): bitstring.
fun add(bitstring, bitstring): bitstring.

(* Symmetric encryption *)
type key.
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.

(* Diffie-Hellman Key Exchange (DHKE) *)
fun s_mul(bitstring, bitstring): key.

(* Events used to determine if events occur *)
event init_proc_v(bitstring).
event init_proc_u(bitstring).
event term_proc_v(bitstring).
event term_proc_u(bitstring).

(* The attacker attempts to steal specific information *)
query attacker(p_t). (* Private key for each component *)
query attacker(p_v).
query attacker(p_u).
query attacker(Sk_uv). (* Communication key between vehicles *)
query attacker(Sk_vu).
query attacker(s_msg). (* Private message *)
query x: bitstring; inj-event(term_proc_v(x)) ==> inj-event(init_proc_v(x)). (* Used to determine if events are executed completely *)
query x: bitstring; inj-event(term_proc_u(x)) ==> inj-event(init_proc_u(x)).

(* TA process *)
let process_t = 
    (* Generate TA's public and private keys *)
    new pf: bitstring;
    new pc: bitstring;
    let p_t = mul(pf, P) in
    let Q_t = mult(p_t, P) in

    (* Receive the registration request from vehicle V [1], generate random number r_v to create authentication parameters Ai_v and Ar_v for the vehicle *)
    in(ch_1, ID_v: bitstring);
    new r_v: bitstring;
    let Ai_v = mult(add(p_t, mult(ID_v, r_v)), P) in
    let Ar_v = mult(r_v, P) in
    (* Return authentication parameters to vehicle V [2] *)
    out(ch_1, (Ai_v, Ar_v, Q_t));
    out(ch_3, (Q_t)). (* Transmit public key to vehicle U *)

(* V process *)
let process_v(kc: key) =
    (* Vehicle V sends its ID to TA for registration [1] *)
    event init_proc_v(ID_v);
    out(ch_1, ID_v);

    (* Receive authentication parameters returned by TA [2], calculate private key p_v and public key Q_v for the vehicle *)
    in(ch_1, (Ai_v: bitstring, Ar_v: bitstring, Q_t: bitstring));
    new rv: bitstring;
    let p_v = mul(Ai_v, rv) in
    let Q_v = mult(p_v, P) in

    (* Broadcast to other vehicles [3], encrypt vehicle V's public key using the group key kc *)
    let E_Q_v = senc(Q_v, kc) in
    out(ch_2, (Ai_v, Ar_v, E_Q_v));

    (* Receive the encrypted public key from vehicle U [5], extract the original public key, and generate a session key with U based on DHKE *)
    in(ch_2, E_Q_u: bitstring);
    let Q_u = sdec(E_Q_u, kc) in
    let Sk_vu = s_mul(p_v, Q_u) in

    (* Test the security and consistency of the session key, receive the message from vehicle U [6], and verify the consistency of the message *)
    in(ch_2, es_msg: bitstring);
    let temp_msg = sdec(es_msg, Sk_vu) in
    if temp_msg = s_msg then
        event term_proc_v(ID_v). (* Trigger event term_proc_v if the message is consistent *)

(* U process *)
let process_u(kc: key) = 
    (* Initialize vehicle U, generate its public key Q_u, and omit the registration process with TA *)
    event init_proc_u(ID_u);
    let Q_u = mult(p_u, P) in
    in(ch_3, Q_t: bitstring); (* Receive TA's public key *)

    (* Receive the broadcast from vehicle V [4], decrypt the encrypted public key Q_v using the group key *)
    in(ch_2, (Ai_v: bitstring, Ar_v: bitstring, E_Q_v: bitstring));
    let Q_v = sdec(E_Q_v, kc) in

    (* Verify that V is registered using the authentication parameters, and send its encrypted public key to vehicle V if the verification passes [5] *)
    if Ai_v = add(Q_t, mul(ID_v, Ar_v)) then
        let E_Q_u = senc(Q_u, kc) in
        let Sk_uv = s_mul(p_u, Q_v) in (* Generate the session key for vehicle V based on DHKE *)
        out(ch_2, E_Q_u);

        (* Encrypt the private message using the newly generated communication key and transmit it to vehicle V [6] *)
        let es_msg = senc(s_msg, Sk_uv) in
        out(ch_2, es_msg);
        event term_proc_u(ID_u).

(* Main process *)
process
    new kc: key;
    ((!process_t) | (process_v(kc)) | (process_u(kc)))
